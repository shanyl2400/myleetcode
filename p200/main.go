package main

import "fmt"

type point struct {
	i int
	j int
}

func numIslands(grid [][]byte) int {
	count := 0
	queue := make([]point, 0)
	for i := range grid {
		for j := range grid[i] {
			if grid[i][j] != '1' {
				continue
			}
			count++
			queue = append(queue, point{i: i, j: j})
			for len(queue) != 0 {
				pt := queue[0]
				i, j := pt.i, pt.j
				queue = queue[1:]
				if i > 0 && grid[i-1][j] == '1' {
					queue = append(queue, point{i: i - 1, j: j})
					grid[i-1][j] = '0'
				}
				if j > 0 && grid[i][j-1] == '1' {
					queue = append(queue, point{i: i, j: j - 1})
					grid[i][j-1] = '0'
				}
				if i < len(grid)-1 && grid[i+1][j] == '1' {
					queue = append(queue, point{i: i + 1, j: j})
					grid[i+1][j] = '0'
				}
				if j < len(grid[i])-1 && grid[i][j+1] == '1' {
					queue = append(queue, point{i: i, j: j + 1})
					grid[i][j+1] = '0'
				}
			}
		}
	}
	return count
}

func main() {
	grid := [][]byte{
		// {'1', '1', '1', '1', '0'},
		// {'1', '1', '0', '1', '0'},
		// {'1', '1', '0', '0', '0'},
		// {'0', '0', '0', '0', '0'},

		// {'1', '1', '0', '0', '0'},
		// {'1', '1', '0', '0', '0'},
		// {'1', '1', '1', '1', '0'},
		// {'0', '1', '0', '1', '1'},

		// {'1', '1', '1'},
		// {'0', '1', '0'},
		// {'1', '1', '1'},

		// {'1', '1', '1', '1', '1'},
		// {'0', '0', '1', '0', '0'},
		// {'1', '1', '1', '1', '1'},

		// {'1', '0', '1', '1', '1'},
		// {'1', '0', '1', '0', '1'},
		// {'1', '1', '1', '0', '1'},
		{'1', '1', '1', '1', '1', '0', '1', '1', '1', '1'},
		{'1', '0', '1', '0', '1', '1', '1', '1', '1', '1'},
		{'0', '1', '1', '1', '0', '1', '1', '1', '1', '1'},
		{'1', '1', '0', '1', '1', '0', '0', '0', '0', '1'},
		{'1', '0', '1', '0', '1', '0', '0', '1', '0', '1'},
		{'1', '0', '0', '1', '1', '1', '0', '1', '0', '0'},
		{'0', '0', '1', '0', '0', '1', '1', '1', '1', '0'},
		{'1', '0', '1', '1', '1', '0', '0', '1', '1', '1'},
		{'1', '1', '1', '1', '1', '1', '1', '1', '0', '1'},
		{'1', '0', '1', '1', '1', '1', '1', '1', '1', '0'},
	}
	fmt.Println(numIslands(grid))
}
